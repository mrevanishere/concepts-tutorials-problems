// 23. Merge k Sorted Lists

// interesting improvements on the merge 1 by 1 approach by others:
// using the mergeTwoLists that i used in my previous attempts:
// we don't merge one by one, but by left and right then halve then repeat until all are in 1 list.
// 12-20ms
class Solution {
public:
     ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        ListNode dummy(0); // doesn't matter what value dummy has
        ListNode *tail = &dummy;
        
        while (l1 && l2) {
            // if l1 value is less than l2, then append l1, and move l1 to next
            if (l1->val < l2->val) {
                tail->next = l1;
                l1 = l1->next;
            // else above for l2
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            // increment tail
            tail = tail->next;
        }

        // at end of one of the lists, concat the other as the tail
        tail->next = l1 ? l1 : l2;
        // return head
        return dummy.next;
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       if (lists.empty()) return nullptr;
        int k = lists.size(); // k lists
        // Idea: half k each time by merging not one by one but by halves
        while (k > 1) {
            for (int i = 0; i < k / 2; ++i) {
                lists[i] = mergeTwoLists(lists[i], lists[k-1-i]); // merge left and right then decrease
            }
            k = (k+1)/2; // adjust k to new size
        }
        return lists.front(); // returns ref to first element in vector (merged)
    }
};

// Using not recursive version, but still slow compared to other solutions
// because merging lists one by one instead of all at once (going through first node of each list, second, etc)
// 152ms
/*
class Solution {
public:
     ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        ListNode dummy(0); // doesn't matter what value dummy has
        ListNode *tail = &dummy;
        
        while (l1 && l2) {
            // if l1 value is less than l2, then append l1, and move l1 to next
            if (l1->val < l2->val) {
                tail->next = l1;
                l1 = l1->next;
            // else above for l2
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            // increment tail
            tail = tail->next;
        }

        // at end of one of the lists, concat the other as the tail
        tail->next = l1 ? l1 : l2;
        // return head
        return dummy.next;
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size();
        if (n == 0) return nullptr;
        if (n == 1) return lists[0];
        
        // There are at least two lls in lists
        ListNode* merged = nullptr;
        for (int i = 0; i < n; ++i) {
            merged = mergeTwoLists(merged, lists[i]);
        }
        return merged;
    }
};
*/

// Naive recursive: using the mergeTwoLists solution, 
// iterate through lists and merge the current ll with lists[i] into merged
// can speed up by having a better mergeTwoLists solution
// 240ms
/*
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        // if one null return other
        if (!l1) return l2;
        if (!l2) return l1;
        
        // if l1.val <= l2.val, l1.next is merged list of l1.next and l2
        if (l1->val <= l2->val) {
            // if ->next is nullptr returns the rest of the other list
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size();
        if (n == 0) return nullptr;
        if (n == 1) return lists[0];
        
        // There are at least two lls in lists
        ListNode* merged = nullptr;
        for (int i = 0; i < n; ++i) {
            merged = mergeTwoLists(merged, lists[i]);
        }
        return merged;
    }
};
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
