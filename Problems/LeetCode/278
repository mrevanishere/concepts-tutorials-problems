// 278. First Bad Version


// The API isBadVersion is defined for you.
// bool isBadVersion(int version);


// Fixed Binary Search
class Solution {
public:
    int firstBadVersion(int n) {
        int left = 1;
        int right = n;
        while (left < right) {
            int mid = left + ((right-left)/2);
            if (isBadVersion(mid)) {
                right = mid;
            } else {
                left = mid+1;
            }
        }
        // First occurence is the left
        return left;
    }
};

// first bad version so either linear serach or binary search
// Binary Search attempt (TLE):
/*
class Solution {
public:
    int firstBadVersion(int n) {
        int lo = 0;
        int hi = n-1;
        int mi = 0;
        int first = mi;
        while (lo < hi) {
            mi = lo + (lo+hi/2);
            // if (isBadVersion(mi)) return mi;
            if (!isBadVersion(mi)) {
                lo = mi + 1;
            } else {
                hi = mi - 1;
            }
            first = mi;
        }
        return first+1;
    }
};
*/
