// 29. Divide Two Integers
// modified version of @Andy_Guo's solution
class Solution {
public:
    int divide(int dividend, int divisor) {
        
        // Cases where overflow occurs
        if (divisor == INT_MIN) return (dividend == INT_MIN) ? 1:0;
        if (dividend == INT_MIN) {
            if (divisor == -1) return INT_MAX;
            if (divisor > 0) return -1+divide(dividend+divisor, divisor);
            else if (divisor < 0) return 1+divide(dividend-divisor, divisor);
        }
        
        bool positive = (dividend > 0) == (divisor > 0);
        
        
        // Remember, left shift is *2^shift and right shift is floor(a/(2^shift))
        
        // Do operations in postiive
        // dividend = dividend > 0 ? dividend : -dividiend;
        // divisor = divisor > 0 ? divisor : -divisor;
        dividend = abs(dividend);
        divisor = abs(divisor);
        
        int remainder = dividend; // remainder starts from dividened then decreases until divisor
        int quotient = 0;
        // cout << remainder << endl;
        // cout << dividend << endl;
        // cout << quotient << endl;
         
        while (remainder >= divisor) {
            int shift = 0;
            // int x = divisor*2^shift
            // while (x <= remainder && x > 0) ++shift;
            while ((divisor<<shift) <= remainder && (divisor<<shift)>0 ) {
                ++shift;
            }
            --shift;
            quotient += (1<<shift); // add 2^shift to quotient (division from base 2 to base 10)
            remainder -= (divisor<<shift); // subtract divisor*2^shift from remainder
        }
        // ex: dvd=10, dvs=3, rmd=10;
        // x = 3*2^0 = 3;
        // (x <= 10 && x > 0) == true;
        // ++shift == 1
        // x = 3*2^1 = 6;
        // (x <= 10 && x > 0) == true;
        // ++shift == 2
        // x = 3*2^2 = 12;
        // (x <= 10 && x > 0) == false;
        // --shift == 1
        // quotient += (1*2^1) == 2
        // remainder -= 3*2^1 == 4
        // second loop 4 >= 3;
        // x = 3;
        // (x <= 4 ...) == true;
        // ++shift == 1;
        // x = 6;
        // (x <= 4...) == false;
        // --shift == 0;
        // quotient += (2^0) == 3
        // remainder -= 3 == 1
        // third check 1 >= 3 == false
        // quotient is 3
        
        // Intuition: multiplying by 2 until it reaches remainder then subtracting that divisor * power of 2 from remainder and repeating
        // quotient is how many times this is done
        return (positive) ? quotient : -quotient;
        
    }
};


// Many other solutions decided to use longs (not allowed) or bit shifting
// but we can just do all calculations in negative instead of positive.
// TLE (INT_MIN / 2), shift by 2 instead


// Almost correct solution, but doesn't solve for overflow (abs(INT_MIN) is overflow).
/*
class Solution {
public:
    int divide(int dividend, int divisor) {
        // if positive
        int a = abs(dividend);
        int b = abs(divisor);
        cout << a << b;
        int count = 0;
        while (a >= b) {
            a -= b;
            ++count;
        }
        
        bool sign = !(dividend < 0 && divisor < 0) && !(divisor >= 0 && dividend >= 0);
        count = (sign) ? -count : count;
        return count;
    }
};
*/
