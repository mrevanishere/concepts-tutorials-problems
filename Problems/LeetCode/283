// 283. Move Zeroes
// better two pointers c++ from python:
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        int slow = 0;
        // int c = 0;
        for (int fast = 0; fast < n; ++fast) {
            if (nums[fast] != 0 && nums[slow] == 0) {
                swap(nums[slow], nums[fast]);
            }
            
            // Wait until nz element is found
            if (nums[slow] != 0) slow++;
            // c++;
        }
        // cout << c;
    }
};


// two pointers c++
/*
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j = 0;
        // move all the nonzero elements advance
        int c = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
            c++;
        }
        for (;j < nums.size(); j++) {
            nums[j] = 0;
            c++;
        }
        cout << c;
    }
};
*/

// Naive: O(N+Z) time and O(N) size
/*
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        // 1. 
        int n = nums.size();
        vector<int> no_zeros;
        for (int i = 0; i < n; ++i) {
            if (nums[i]) {
                no_zeros.push_back(nums[i]);
            }
        }
        int m = n - no_zeros.size();
        for (int i = 0; i < m; ++i) {
            no_zeros.push_back(0);
        }
        nums = no_zeros;
    }
};
*/