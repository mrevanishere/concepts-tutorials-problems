// 119. Pascal's Triangle II

// DP problem memoryless use previous row to generate next row
// O(n^2) time, O(n-1) extra space
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> prev_row = {1};
        for (int i = 0; i < rowIndex; ++i) {
            vector<int> curr_row = {1};
            for (int j = 0; j< prev_row.size() -1; ++j) {
                curr_row.push_back(prev_row[j]+prev_row[j+1]);
            }
            curr_row.push_back(1);
            prev_row = curr_row;
        }
        return prev_row;
    }
};

// Based off of my code from:
// 118. Pascal's Triangle

// O(n^2) runtime, O(sum of n)
// Iterate over previous row size-1 times to generate next row
/*
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> bincoef;
        bincoef.push_back(vector<int>{1});
        for (int i = 0; i < numRows-1; ++i) {
            vector<int> row;
            row.push_back(1);
            for (int j = 0; j < bincoef[i].size() - 1; ++j) {
                row.push_back(bincoef[i][j]+bincoef[i][j+1]);
                //cout << bincoef[i][j]+bincoef[i][j+1] << endl;
            }
            row.push_back(1);
            bincoef.push_back(row);
        }
        return bincoef;
    }
};
*/
