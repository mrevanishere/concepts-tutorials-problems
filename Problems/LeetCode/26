// 26. Remove Duplicates from Sorted Array

// STL Solution
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        /*
            Basically, create a Set from a list and returns distance between iterators.
        */
        return std::unique(nums.begin(), nums.end()) - nums.begin();
        // unique returns iterator to last position,
        // subtractint the begining position from the last position gives size.
    }
};

// Another Naive
/*
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.size() < 2) return nums.size();
        
        for (int j = 1; j < nums.size(); ++j) {
            if (nums[j] == nums[j-1]) {
                nums.erase(nums.begin() + j);
                --j;
                continue;
            }
        }
        return nums.size();
    }
};
*/


// Naive Solution
/*
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        // kcout << (nums.size() < 2) << endl;
        if (nums.size() < 2) return nums.size();
        
        int prev = nums[0];
        // cout << prev << endl;
        for (int i = 1; i < nums.size(); ++i) {
            int curr = nums[i];
            // cout << prev << " " << curr << " " << i << endl;
            if (prev == curr) {
                // cout << "erased" << endl;
                nums.erase(nums.begin() + i);
                --i;
                continue;
            }
            prev = curr;
        }
        return nums.size();
    }
};
*/
