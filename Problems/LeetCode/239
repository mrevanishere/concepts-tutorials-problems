// 239. Sliding Window Maximum
// Transformed this java solution to C++:
// https://leetcode.com/problems/sliding-window-maximum/discuss/1185764/Classic-problem-Java-intuition-and-solution-explained-using-heap-and-Dequeue
// O(n) time and O(k) space for queue
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // Perfect deque problem, or adjusted heap problem + Sliding Window
        int n = nums.size();
        // number of sliding windows
        vector<int> max_window(n-k+1); 
        int left = 0; // left bound of win
        int right = 0; // right bound of win
        // Non-increasing deque
        deque<int> dq;
        // 
        for (; right < k; ++right) {
            while(!dq.empty() && (nums[right] > nums[dq.back()])) {
                dq.pop_back();
            }
            dq.push_back(right);
        }
        // First answer
        max_window[left++] = nums[dq.front()];
        while (right < n) {
            // Keep queue non-increasing
            while (!dq.empty() && (nums[right] > nums[dq.back()])) {
                dq.pop_back();
            }
            dq.push_back(right);
            while (dq.front() < left) {
                dq.pop_front();
            }
            max_window[left] = nums[dq.front()];
            left++;
            right++;
        }
        return max_window;
        
    }
};
// Attempt:
/*
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // TLE: BRUTE FORCE
        // 1. Keep track of max in each window
        // 2. Figure out of what next max is if current max is dropped
        int n = nums.size();
        int curr = nums[0];
        // for (int i = 0; i < k; ++i)     curr = max(curr, nums[i]);
        // sum = accumulate(nums.begin(), nums.begin()+k, sum);
        // cout << sum << "\n";
        //int best = curr;
        vector<int> best_window(n-k+1);
        for (int i = 0; i < n-k+1; ++i) {
            //  cout << "at i+k: " << nums[i+k] << ", at i: " << nums[i] << ", sum: " << sum << endl;
            curr = nums[i];
            for (int j = 0; j < k; ++j) {
                //cout << "i: " << i;
                //cout << ", j: " << j;
                //cout << ", v: " << nums[i + j] << endl;
                curr = max(curr, nums[i+j]);
            }
            best_window[i] = curr;
        }
        return best_window;
        
    }
};
*/