// 709. To Lower Case
// Naive map approach from upper to lower
// checks if character isupper then replaces it with lower
// returns string
// O(n) time and O(1) Space but with a hashmap
// could instead add values to the ascii value 
class Solution {
public:
    string toLowerCase(string str) {
        lower['A'] = 'a';
        lower['B'] = 'b';
        lower['C'] = 'c';
        lower['D'] = 'd';
        lower['E'] = 'e';
        lower['F'] = 'f';
        lower['G'] = 'g';
        lower['H'] = 'h';
        lower['I'] = 'i';
        lower['J'] = 'j';
        lower['K'] = 'k';
        lower['L'] = 'l';
        lower['M'] = 'm';
        lower['N'] = 'n';
        lower['O'] = 'o';
        lower['P'] = 'p';
        lower['Q'] = 'q';
        lower['R'] = 'r';
        lower['S'] = 's';
        lower['T'] = 't';
        lower['U'] = 'u';
        lower['V'] = 'v';
        lower['W'] = 'w';
        lower['X'] = 'x';
        lower['Y'] = 'y';
        lower['Z'] = 'z';
        locale loc;
        for (int i = 0; i < str.size(); ++i) {
            if (isupper(str[i], loc)) {
                str[i] = lower[str[i]];
            }
        }
        return str;
    }
private:
    map<char, char> lower;
};
