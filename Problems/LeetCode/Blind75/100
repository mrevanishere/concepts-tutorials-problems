/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// Yay! solved it without consulting any material.
// BFS
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        // If one is null but not the other
        if (p == nullptr && q == nullptr) {
            return true;
        } else if (p == nullptr || q == nullptr) {
            return false;
        }
        // push both p,q onto queue
        queue<TreeNode *> todo;
        todo.push(p);
        todo.push(q);

        while (!todo.empty()) {
            // divide queue size by 2 since comparing two nodes at once
            int n = todo.size()/2;
            for (int i = 0; i < n; ++i) {
                // get p node and the q node
                TreeNode *pr = todo.front();
                todo.pop();
                TreeNode *qr = todo.front();
                todo.pop();
                // cout << i << " " <<  pr->val << " " << qr->val << "\n";
                // compare values
                if (pr->val != qr->val) return false;
                
                // if both aren't nullptr push to queue
                if (pr->left != nullptr && qr->left != nullptr) {
                    todo.push(pr->left);
                    todo.push(qr->left);
                } 
                // if at least one is nullptr, check if only one is nullptr
                else if (pr->left != qr->left) {
                    // cout << pr->left << " " << qr->left;
                    return false;
                }
                // same as above
                if (pr->right != nullptr && qr->right != nullptr) {
                    todo.push(pr->right);
                    todo.push(qr->right);
                } else if (pr->right != qr->right) {
                    return false;
                }
            }
        }
        return true;
    }
};
