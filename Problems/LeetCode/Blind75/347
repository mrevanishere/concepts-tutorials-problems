// 347. Top K Frequent Elements
// Approaches: map + prio q (heap)

// O(n log(n-k))
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        // if top kth is all then
        if (k == nums.size()) return nums;
        
        // Build freq table O(N)
        map<int, int> freq;
        for (int n : nums) {
            // add 1 or initialize to 1
            ++freq[n];
        }
        
        vector<int> kfreq;
        // heap/prioq
        // First: freq
        // Second: number
        priority_queue<pair<int, int>> pq;
        // for each pair in freq
        for (auto it = freq.begin(); it != freq.end(); ++it) {
            // push pair where first is it->second (value) and second is it->first (key)
            pq.push(make_pair(it->second, it->first));
            // put top k into kfreq;
            if (pq.size() > (int) freq.size() - k) {
                kfreq.push_back(pq.top().second);
                pq.pop();
            }
        }
        return kfreq;
    }
};



// Naive: get counts then sort by value
// couldn't do the implementation correctly
/*
class Solution {
public:
    struct dval { 
        template <typename T> 

        // Comparator function 
        bool operator()(const T& l, 
                        const T& r) const
        { 
            if (l.second != r.second) { 
                return l.second < r.second; 
            } 
            return l.first < r.first; 
        } 
    }; 
    map<int, int> sort_by_value(map<int, int>& kv) {
        set<pair<int, int>, dval> S(kv.begin(), kv.end());
        map<int, int> sorted;
        for (auto& it: S) {
            sorted[it.first] = it.second;
            cout << it.first << " " << it.second << "\n";
        }
        return sorted;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {
        map<int, int> freq;
        int n = nums.size();
        for (int a : nums) {
            if (freq.count(a) > 0) {
                freq[a] += 1;
            } else {
                freq[a] = 1;
            }
        }
        map<int, int> sorted = sort_by_value(freq);
        
        vector<int> kfreq;
        if (k >= sorted.size()) {
            for (std::map<int, int>::iterator it = sorted.begin(); it != sorted.end(); ++it) {
                kfreq.push_back(it->first);
            }
        } else {
            for (std::map<int, int>::iterator it = sorted.begin(); it != sorted.end(); ++it) {
                kfreq.push_back(it->first);
            }
        }

        if (k >= kfreq.size()) {
            cout << "kfreq" << "\n";
            std::reverse(kfreq.begin(), kfreq.end());
            return kfreq;
        } else {
            cout << "kfreqslice" << "\n";
            std::vector<int> kfreqslice(kfreq.begin(), kfreq.begin()+k);
            // std::reverse(kfreqslice.begin(), kfreqslice.end());
            return kfreqslice;
        }
    
    }
};
*/
