/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// whole BFS 
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (root == nullptr) return 0;
        int max_depth = 0;
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty()) {
            // loops when done with a level then iterates max_depth
            ++max_depth;
            // goes through all children for that level
            int n = q.size();
            for (int i = 0; i < n; ++i) {
                TreeNode *p = q.front();
                q.pop();
                // if not nullptr add to queue
                if (p->left != nullptr) q.push(p->left);
                if (p->right != nullptr) q.push(p->right);
            }
        }
        return max_depth;
    }
};
