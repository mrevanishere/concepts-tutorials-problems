// 226. Invert Binary Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// BFS swap very easy
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        // if 0 levels or only 1 level return true
        if (root == nullptr || (root->left == nullptr && root->right == nullptr)) return root;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty()) {
            TreeNode *p = q.front();
            q.pop();
            // swap the pointers for the left and right children, resulting in all subnodes to also follow the swapped parent.
            swap(p->left, p->right);
            if (p->left != nullptr) q.push(p->left);
            if (p->right != nullptr) q.push(p->right);
        }
        return root;
    }
};
