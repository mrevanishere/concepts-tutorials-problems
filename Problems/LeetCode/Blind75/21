// 21. Merge Two Sorted Lists

// Intuitive Recursive
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        // if one null return other
        if (!l1) return l2;
        if (!l2) return l1;
        
        // if l1.val <= l2.val, l1.next is merged list of l1.next and l2
        if (l1->val <= l2->val) {
            // if ->next is nullptr returns the rest of the other list
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
};

// shadow copy O(n+m)
/*
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        // if one is empty return the other
        if (l1 == nullptr) return l2;
        if (l2 == nullptr) return l1;
        
        
        ListNode* head;
        // get first element as head
        if (l1->val < l2->val) {
            head = l1;
            l1 = l1->next;
        }
        else {
            head = l2;
            l2 = l2->next;
        }
        // pointer to merge lists
        ListNode* p = head;
        while (l1 && l2) {
            if (l1->val < l2->val) {
                p->next = l1;
                l1 = l1->next;
            }
            else {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        // rest of tail
        if (l1) {
            p->next = l1;
        }
        else {
            p->next = l2;
        }
        return head;
    }
};
*/

// Alternative Recursive
/*
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        // if (l1 not null or l2 is null) && (l1.val > l2.val) swap(l1, l2);
        if (!l1 || l2 && l1->val > l2->val) {
            swap(l1, l2); 
        }
        // if not null, set the next to the merged list l1->next, l2
        if (l1) {
            l1->next = mergeTwoLists(l1->next, l2);
        }
        return l1;
    }
};
*/


