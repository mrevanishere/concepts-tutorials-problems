// 11. Container with most water (area)
// O(n^2) TLE
/*
        int g = 0;
        int s = height.size();
        for (int i = 0; i < s; ++i) {
            for (int j =; j < s; ++j) {
                g = max((min(height[i], height[j]) * (j-i)), g);
            }
        }
        return g;
*/
// Two pointer
class Solution {
public:
    int maxArea(vector<int>& height) {
        int max_area = INT32_MIN;
        int area;
        int left = 0;
        int right = height.size() - 1;
        while (left < right) {
            // take area between right and left and compare to max_area
            area = min(height[left], height[right]) * (right - left);
            max_area = max(max_area, area);
            // move pointers;
            // Idea: keep the greatest value (tallest), and move the other poitner
            if (height[left] < height[right]) {
                ++left;
            } else {
                --right;
            }
        }
        return max_area;
    }
};
